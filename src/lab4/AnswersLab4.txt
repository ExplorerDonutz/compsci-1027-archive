Answer the following questions.

EXERCISE 1
----------

1. Which suggestion made by Eclipse to fix the error in line 16 makes sense?

Eclipse suggested that the variables are made static.

2. What is the error in line 21?

The println was outside the main method.

3. What line caused the program to crash?

        for (int i = 0; i <= Errors.i; ++i)
            arr[i] = 10;

Why does the program crash?

i is going out of the arrays range

4. What do you think the program is going to print?

i =   + i
i = 3 arr[0] = 10 arr[1] = 10 arr[2] = 10

EXERCISE 2
----------

5. Which line of the program causes it to crash?

Line 10: testArray[i][j] = (i + 1) * j;

6. Why did the value of testArray[0][0] not change?

Because j starts at 1 instead of 0, so [0][0] is never accessed

EXERCISE 3
----------

7. Which line of the program causes it to crash?

Line 12: total = (i * 100) / load;

8. Which line is highlighted after pressing F6?

Line 10: i = process(2);

9. What is the difference between F6 (Step over) and F5 (Step into)?

Step over will skip over the current line, step into will go run the code in that line, including going into a function call.

10. Why does the program crashes if you press F6 again?

Because the program steps over onto the error on line 12

EXERCISE 4
----------

11. Why the compiler shows an error even though i has been declared in the loop: for (int i = 1; i < 2; ++i)?

i is in the scope of the for loop, it doesn't exist outside of it.

12. What do you think will be the values of variables var1 and the String in obj1 immediately after method2(obj1) is executed?

-20 and "joe"

What do you think will be the values of variables var1 and the String in obj1 immediately after method1(obj1) is executed?

-20 and "joe"

13. What are the correct values of variables var1 and the String in obj1 immediately after method2(obj1) is executed?

-20 and "joe"

14. Why is the result of the comparison (obj1 == obj2) false even though both obj1 and obj2 contain the same information, namely "joe"?
Because it is comparing the addresses stored by the objects, not the values themselves.